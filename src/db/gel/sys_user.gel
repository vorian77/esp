module sys_user {
  abstract type Mgmt {
    required createdAt: datetime {
      default := datetime_of_transaction();
      readonly := true;
    };
    required createdBy: sys_user::SysUser {
      readonly := true;
      on target delete delete source;
    };
    modifiedAt: datetime {
      rewrite insert, update using (datetime_of_transaction())
    }
    required modifiedBy: sys_user::SysUser{
      on target delete delete source;
    };
  }

  type SysApp extending sys_core::SysObjAttr  {
    required appHeader: sys_user::SysAppHeader;
    multi nodes: sys_core::SysNodeObj {
       on target delete allow;
    };
  }

  type SysAppHeader extending sys_core::SysObj {}

  # task  
  type SysTask extending sys_core::SysObjAttr  {
    codeTaskStatusObj: sys_core::SysCode;
    required codeTaskType: sys_core::SysCode;
    description: str;
    exprShow: str;
    exprStatus: str;
    exprWith: str;
    hasAltOpen: bool;
    noDataMsg: str;
    nodeObj: sys_core::SysNodeObj;
  }
  
  type SysUser extending sys_core::SysObjAttr {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCode('ct_sys_obj_attr_type', 'at_sys_user');
    };
    required defaultOrg: sys_core::SysOrg;
    required defaultSystem: sys_core::SysSystem;
    isActive: bool;
    required multi orgs: sys_core::SysOrg {
      on target delete allow;
    };
    multi parms: sys_user::SysUserParm {
      on source delete delete target;
      on target delete allow;
    };
    required password: str {
      default := (SELECT <str>uuid_generate_v4());
    };
    required person: default::SysPerson {
      on source delete allow;
    };
    multi preferences: sys_user::SysUserPref {
      on source delete delete target;
      on target delete allow;
    };
    required multi systems: sys_core::SysSystem;
    multi userTypes: sys_user::SysUserType {
      on target delete allow;
    };
    trigger sys_user_delete after delete for each do (
      delete default::SysPerson filter .id not in (app_cm::CmClient.person.id union sys_core::SysObjAttrEnt.contacts.id union sys_user::SysUser.person.id)
    );
    constraint exclusive on (.name);
  }

  # action
  type SysUserAction extending sys_core::SysObjAttr {
    multi actionConfirms: sys_user::SysUserActionConfirm {
      on source delete delete target;
      on target delete allow;
    };
    required codeAction: sys_core::SysCodeAction;
    required codeConfirmType: sys_core::SysCode;
    exprAction: str;
    exprEnable: str;
    exprShow: str;
    exprShowExpr: str;
    exprWith: str;
    navDestination: sys_core::SysNavDestination{
      on target delete allow;
    };
  }
  type SysUserActionConfirm extending sys_user::Mgmt {
    required codeConfirmType: sys_core::SysCode;
    required codeTriggerConfirmConditional: sys_core::SysCode;
    confirmButtonLabelCancel: str;
    confirmButtonLabelConfirm: str;
    confirmMessage: str;
    confirmTitle: str;
  }


  type SysUserParm  {
    required codeType: sys_core::SysCode;
    required idFeature: int64;
    required parmData: json;
    required user: sys_user::SysUser {
      on target delete delete source;
    };
    constraint exclusive on ((.user, .idFeature, .codeType));
  }
  
  type SysUserPref extending sys_user::Mgmt {
    required codeType: sys_core::SysCode;
    required isActive: bool;
    required user: sys_user::SysUser {
      on target delete delete source;
    };
    constraint exclusive on ((.user, .codeType));
  } 
  
  # type
  type SysUserType extending sys_core::SysObjAttr {
    multi attrsExpr: sys_core::SysObjAttrExpr {
      on source delete delete target;
      on target delete allow;
    };
    multi attrsVirtual: sys_core::SysObjAttrVirtual {
      on source delete delete target;
      on target delete allow;
    };
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCode('ct_sys_obj_attr_type', 'at_sys_user_type');
    };
    isSelfSignup: bool;
    users := .<userTypes[is sys_user::SysUser];
    constraint exclusive on ((.name));
  }

  # GLOBALS
  global currentUserId: uuid;

  global currentUser := (
    select sys_user::SysUser filter .id = global currentUserId
  );

  # FUNCTIONS
  function getApp(name: str) -> optional sys_user::SysApp
    using (select assert_single((select sys_user::SysApp filter .name = name)));

  function getRootUser() -> optional sys_user::SysUser
    using (select assert_single((select sys_user::SysUser filter .name = '*ROOTUSER*')));
  
  function getUserAction(name: str) -> optional sys_user::SysUserAction
      using (select assert_single((select sys_user::SysUserAction filter .name = name)));
    
  function getUserById(userId: str) -> optional sys_user::SysUser
      using (select sys_user::SysUser filter .id = <uuid>userId);

  function getUserByName(name: str) -> optional sys_user::SysUser
      using (select assert_single((select sys_user::SysUser filter .name = name)));

  function getUserType(userTypeName: str) -> optional sys_user::SysUserType
    using (select sys_user::SysUserType filter .name = userTypeName);
  }



