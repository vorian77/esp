module sys_core {
  type ObjRoot {    
    multi attrsAccess: sys_core::SysObjAttrAccess {
      on source delete delete target;
      on target delete allow;
    };
    multi attrsAction: sys_core::SysObjAttrAction {
      on source delete delete target;
      on target delete allow;
    };
    isGlobalResource: bool {
      default := false;
    };
    note: str;
     
    # test fields
    testBool: bool;
    multi testCodeMulti: sys_core::SysCode;
    testCodeSingle: sys_core::SysCode;
    testDate: cal::local_date;
    testDateTime: cal::local_datetime;
    testNumberFloat: float64;
    testNumberInt: int64;
    testText: str;

    teststr: str;
  }

  type ObjRootCore extending sys_core::ObjRoot {
    codeIcon: sys_core::SysCode;
    description: str;
    header: str;
    required name: str;
    orderDefine: default::nonNegative;
  }
    
  type SysObj extending sys_core::ObjRootCore, sys_user::Mgmt {
    required ownerSys: sys_core::SysSystem;
  } 

  type SysObjAttr extending sys_core::SysObj {
    required codeAttrType: sys_core::SysCode;
  }

  type SysObjAttrAccess extending sys_user::Mgmt {
    required codeAttrTypeAccess: sys_core::SysCode;
    required obj: sys_core::SysObjAttr;
  }

  type SysObjAttrAction extending sys_user::Mgmt {
    required codeAttrTypeAction: sys_core::SysCode;
    required obj: sys_core::SysObjAttr;
  }

  type SysObjAttrEnt extending sys_core::SysObjAttr {
    addr1: str;
    addr2: str;
    city: str;
    codeState: sys_core::SysCode;
    multi contacts: default::SysPerson{
      on source delete delete target;
      on target delete allow;
    };
    email: str;
    multi notes: sys_core::SysObjNote{
      on source delete delete target;
      on target delete allow;
    };
    phoneOffice: str;
    website: str;
    zip: str;
    trigger sys_user_delete after delete for each do (
      delete default::SysPerson filter .id not in (app_cm::CmClient.person.id union sys_core::SysObjAttrEnt.contacts.id union sys_user::SysUser.person.id)
    );
    constraint exclusive on ((.ownerSys, .name));
  }

  type SysObjAttrExpr extending sys_user::Mgmt {
    required codeAttrTypeAction: sys_core::SysCode;
    required expr: str;
  }
  
  type SysObjAttrVirtual extending sys_user::Mgmt {
    multi attrsAccess: sys_core::SysObjAttrAccess {
      on source delete delete target;
      on target delete allow;
    };
    multi attrsAction: sys_core::SysObjAttrAction {
      on source delete delete target;
      on target delete allow;
    };
    required expr: str;
  }

  type SysObjNote extending sys_user::Mgmt {
    required date: cal::local_date;
    required codeType: sys_core::SysCode;
    note: str;
  }
  
  type SysObjOrg extending sys_core::ObjRootCore, sys_user::Mgmt {
    required ownerOrg: sys_core::SysOrg;
    constraint exclusive on ((.ownerOrg, .name));
  } 
  
  type SysOrg extending sys_core::ObjRootCore, sys_user::Mgmt {
    users := .<ownerOrg[is sys_user::SysUser];
    constraint exclusive on (.name);
  }

  type SysSystem extending sys_core::ObjRootCore, sys_user::Mgmt  {
    required appName: str;
    file: json;
    logoMarginRight: float64;
    logoWidth: int16;
    multi nodesConfig: sys_core::SysNodeObjConfig{
      on target delete allow;
    };
    required ownerOrg: sys_core::SysOrg;
    multi systemParents: sys_core::SysSystem;
    multi typesCodeType: sys_core::SysCodeType;
    users := .<systems[is sys_user::SysUser];
    constraint exclusive on ((.ownerOrg, .name));
  }

  # other sys_core objects
  type SysCodeType extending sys_core::SysObj {
    parent: sys_core::SysCodeType;
    order: default::nonNegative;
    valueDecimal: float64;
    valueInteger: int64;
    valueString: str;
    constraint exclusive on ((.name));
  }

  type SysCode extending sys_core::SysObjAttr {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_code');
    };
    parent: sys_core::SysCode;
    required codeType: sys_core::SysCodeType;
    multi codeTypeFamily: sys_core::SysCodeType;
    order: default::nonNegative;
    valueDecimal: float64;
    valueInteger: int64;
    valueString: str;
    constraint exclusive on ((.ownerSys, .codeType, .name));
  }

  type SysCodeAction extending sys_core::SysCode {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_code_action');
    };
    constraint exclusive on ((.ownerSys, .codeType, .name));
  }

  type SysObjDb extending sys_core::SysObjAttrEnt {
    exprFilter: str;
    exprFilterExcept: str;
    exprSort: str;
    exprWith: str;
    multi exprUnions: str;
    
    listPresetExpr: str;
    parentColumn: sys_db::SysColumn;
    parentFilterExpr: str;
    parentTable: sys_db::SysTable;

    multi queryRiders: sys_core::SysDataObjQueryRider{
      on source delete delete target;
      on target delete allow;
    };
    
    table: sys_db::SysTable;
    multi tables: sys_core::SysDataObjTable {
      on source delete delete target;
      on target delete allow;
    };
  }

  # SysDataObj
  type SysDataObj extending sys_core::SysObjDb {
    actionGroup: sys_core::SysDataObjActionGroup;
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj');
    };
    required codeCardinality: sys_core::SysCode;
    codeDataObjType: sys_core::SysCode;
    codeListPresetType: sys_core::SysCode;
    
    multi columns: sys_core::SysDataObjColumn {
      on source delete delete target;
      on target delete allow;
    };

    multi formStyles: sys_core::SysDataObjStyle {
      on source delete delete target;
      on target delete allow;
    };

    isFormReadonly: bool;
    isInitialValidationSilent: bool;
    required isListEdit: bool;
    isListSuppressFilterSort: bool;
    isListSuppressSelect: bool;
    
    listReorderColumn: sys_db::SysColumn;    
    processType: sys_core::SysCode;
    subHeader: str;
    constraint exclusive on (.name);
  } 

  # dataObj-action
  type SysDataObjAction extending sys_user::Mgmt {
    required action: sys_user::SysUserAction;
    required codeColor: sys_core::SysCode;
    headerAlt: str;
    required isListRowAction: bool;
    required orderDefine: default::nonNegative;
  }
  type SysDataObjActionGroup extending sys_core::SysObjAttrEnt {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj_action_group');
    };
    multi dataObjActions: sys_core::SysDataObjAction {
      on source delete delete target;
      on target delete allow;
    };
    constraint exclusive on (.name);
  }

  # SysDataObjColumn
  type SysDataObjColumn extending sys_user::Mgmt {
    action: sys_user::SysUserAction;

    codeAccess: sys_core::SysCode;
    codeAlignmentAlt: sys_core::SysCode;
    codeColor: sys_core::SysCode;
    codeDbDataSourceValue: sys_core::SysCode;
    codeFieldElement: sys_core::SysCode;
    codeSortDir: sys_core::SysCode;
    required column: sys_db::SysColumn;
    columnBacklink: sys_db::SysColumn;

    customColActionValue: str;
    customColAlign: str;
    customColFile: json;
    customColIsBold: bool;
    customColIsSubHeader: bool;
    customColLabel: str;
    customColCodeComponent: sys_core::SysCode;
    customColPrefix: str;
    customColRawHTML: str;
    customColSize: str;
    customColSource: str;
    customColSourceKey: str;
    multi customEmbedShellFields: sys_core::SysDataObjColumn {
      on target delete allow;
    };

    exprCustom: str;
    exprPreset: str;
    exprSave: str;
    
    fieldEmbedListConfig: sys_core::SysDataObjFieldEmbedListConfig{
      on target delete allow;
    };
    fieldEmbedListEdit: sys_core::SysDataObjFieldEmbedListEdit{
      on target delete allow;
    };
    fieldEmbedListSelect: sys_core::SysDataObjFieldEmbedListSelect{
      on target delete allow;
    };
   
    fieldListItems: sys_core::SysDataObjFieldListItems;
    fieldListItemsParmValue: str;
    multi fieldListItemsParmValueList: str;

    multi fieldStyles: sys_core::SysDataObjStyle {
      on source delete delete target;
      on target delete allow;
    };

    file: json;

    headerAlt: str;
    height: int16;

    indexTable: default::nonNegative;
    inputMaskAlt: str;
    isDisplay: bool;
    isDisplayable: bool;
    isDisplayBlock: bool;

    required isExcludeInsert: bool;
    required isExcludeSelect: bool;
    required isExcludeUpdate: bool;

    multi itemChanges: sys_core::SysDataObjColumnItemChange {
      on source delete delete target;
      on target delete allow;
    };
       
    multi linkColumns: sys_core::SysDataObjColumnLink{
      on source delete delete target;
      on target delete allow;
    };
    linkTable: sys_db::SysTable;
    
    nameCustom: str;

    orderCrumb: default::nonNegative;
    required orderDefine: default::nonNegative;
    orderDisplay: default::nonNegative;
    orderSort: default::nonNegative;

    propNameKeyPrefix: str;
    propNameKeySuffix: str;

    width: int16;
  }

  type SysDataObjColumnItemChange extending sys_user::Mgmt {
    codeAccess: sys_core::SysCode;
    required codeItemChangeAction: sys_core::SysCode;
    codeItemChangeValueType: sys_core::SysCode;
    codeOp: sys_core::SysCode;
    codeItemChangeRecordStatus: sys_core::SysCode; 
    required codeItemChangeTriggerType: sys_core::SysCode; 
    multi columns: sys_core::SysDataObjColumn;
    required orderDefine: default::nonNegative;
    retrieveParmKey: str;
    
    valueTargetAttribute: sys_core::SysObjAttr;
    valueTargetCode: sys_core::SysCode;
    valueTargetScalar: str;
    
    multi valueTriggerAttributes: sys_core::SysObjAttr;
    multi valueTriggerCodes: sys_core::SysCode;
     valueTriggerExpr: str;
     valueTriggerScalar: str;
  }
    
  type SysDataObjColumnLink extending sys_user::Mgmt {
    column: sys_db::SysColumn;
    required orderDefine: default::nonNegative;
  }

  type SysDataObjFieldEmbedListConfig extending sys_core::SysObjAttrEnt {
    required actionGroupModal: sys_core::SysDataObjActionGroup {
      on target delete allow;
    };
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj_field_embed_list_config');
    };
    required dataObjEmbed: sys_core::SysDataObj {
      on source delete allow;
    };
    required dataObjModal: sys_core::SysDataObj {
      on source delete allow;
    };
    constraint exclusive on (.name);
  }

  type SysDataObjFieldEmbedListEdit extending sys_core::SysObjAttrEnt {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj_field_embed_list_edit');
    };
    required dataObjEmbed: sys_core::SysDataObj {
      on source delete allow;
    };
    constraint exclusive on (.name);
  }

  type SysDataObjFieldEmbedListSelect extending sys_core::SysObjAttrEnt {
    required actionGroupModal: sys_core::SysDataObjActionGroup {
      on target delete allow;
    }
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj_field_embed_list_select');
    };
    required btnLabelComplete: str;
    required dataObjList: sys_core::SysDataObj {
      on source delete allow;
    };
    constraint exclusive on (.name);
  }

  type SysDataObjFieldListItems extending sys_core::SysObjDb {
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_data_obj_field_list_item');
    };
    codeDataTypeDisplay: sys_core::SysCode;
    codeMask: sys_core::SysCode;
    displayIdSeparator: str;
    multi props: sys_core::SysDataObjFieldListItemsProp {
      on source delete delete target;
      on target delete allow;
    };
    constraint exclusive on (.name);
  }

  type SysDataObjFieldListItemsProp  {
    required expr: str;
    required header: str;
    required isDisplayId: bool;
    required key: str;
    required orderDefine: default::nonNegative;
    orderSort: default::nonNegative;
  }
 
  type SysDataObjQueryRider extending sys_user::Mgmt {
    required codeQueryAction: sys_core::SysCode;
    codeQueryFunction: sys_core::SysCode;
    required codeQueryPlatform: sys_core::SysCode;
    required codeQueryType: sys_core::SysCode;
    required codeTriggerTiming: sys_core::SysCode;
    codeUserMsgDelivery: sys_core::SysCode;
    expr: str;
    navDestination: sys_core::SysNavDestination{
      on source delete delete target;
      on target delete allow;
    };
    parmValueStr: str;  
    userMsg: str;
  }

  type SysDataObjStyle {
    exprTrigger: str;
    required styleProp: str;
    required styleValue: str;
  }
  
  type SysDataObjTable extending sys_user::Mgmt {
    multi columnsId: sys_db::SysColumn{
      on target delete allow;
    };  
    columnParent: sys_db::SysColumn;
    exprFilterUpdate: str;
    required index: default::nonNegative;
    indexParent: default::nonNegative;
    isTableExtension: bool;
    required table: sys_db::SysTable;
  }

  type SysDataObjWith extending sys_user::Mgmt {
    required index: default::nonNegative;
    required expr: str;
  }
  
  type SysEligibility extending sys_core::SysObjAttr {
     overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_eligibility');
    };
    multi nodes: sys_core::SysEligibilityNode {
      on source delete delete target;
      on target delete allow;
    };
  }

  type SysEligibilityNode extending sys_core::ObjRootCore {
    required codeEligibilityType: sys_core::SysCode;
    exprState: str;
    required nodeIdx: default::nonNegative;
    nodeIdxDependent: default::nonNegative;
    nodeIdxParent: default::nonNegative;
    order: default::nonNegative;
  }

  type SysMsg extending sys_core::ObjRoot {
    required dateMsg: datetime {
      default := datetime_of_transaction();
      readonly := true;
    };
    required isClosed: bool {
      default := false;
    };
    required isForward: bool {
      default := false;
    };
    parent: sys_core::SysMsg;
    multi readers: sys_user::SysUser;
    multi recipients: sys_core::ObjRoot;
    replies := .<parent[IS sys_core::SysMsg];
    required sender: sys_user::SysUser;
    required subject: str;
    thread :=  distinct(.replies union sys_core::SysMsg);
  }

  type SysNavDestination {
    backCount: int16;
    required codeDestinationType: sys_core::SysCode;
    nodeDestination: sys_core::SysNodeObj{
      on target delete delete source;
    };
  }

  type SysNodeObj extending sys_core::SysObjAttrEnt {
    multi actions: sys_core::SysNodeObjAction{
      on source delete allow;
    };
    multi children: sys_core::SysNodeObjChild{
      on source delete allow;
    };
    overloaded required codeAttrType: sys_core::SysCode {
      default := sys_core::getCodeAttrType('at_sys_node_obj');
    };
    required codeComponent: sys_core::SysCode;
    required codeNodeType: sys_core::SysCode;
    codeQueryTypeAlt: sys_core::SysCode;
    codeRenderPlatform: sys_core::SysCode;
    dataObj: sys_core::SysDataObj;
    required isAlwaysRetrieveData: bool;
    required isHideRowManager: bool;
    isRetrievePreset: bool;
    page: str;
    selectListItems: sys_core::SysDataObjFieldListItems;
    selectListItemsHeader: str;
    selectListItemsParmValue: str;
    systemQuerySource: sys_core::SysSystem; 
    constraint exclusive on (.name);
  }

  type SysNodeObjAction {
    required codeAction: sys_core::SysCodeAction;
    required nodeObj: sys_core::SysNodeObj{
      on target delete delete source;
    };
  }
  
  type SysNodeObjChild {
    required nodeObj: sys_core::SysNodeObj{
      on target delete delete source;
    };
    required orderDefine: default::nonNegative;
  }
  
  type SysNodeObjConfig {
    required codeAttrType: sys_core::SysCode;
    required nodeObj: sys_core::SysNodeObj{
      on target delete delete source;
    };
  }
    
  type SysNotify extending sys_core::SysObj {
    required codeNotifyType: sys_core::SysCode;
    required exprCron: str;
    exprData: str;
    required exprTrigger: str;
    msg: str;
  }

  # FUNCTIONS
  function getCode(codeTypeName: str,  codeName: str) -> optional sys_core::SysCode
    using (select assert_single(sys_core::SysCode filter 
      .codeType.name = codeTypeName and .name = codeName));

  function getCodeAction(codeName: str) -> optional sys_core::SysCodeAction
    using (select assert_single(sys_core::SysCodeAction filter .name = codeName));
      
  function getCodeAttrType(codeName: str) -> optional sys_core::SysCode
    using (select assert_single(sys_core::SysCode filter .codeType.name = 'ct_sys_obj_attr_type' AND .name = codeName));
    
  function getCodeSystem(sysName: str, codeTypeName: str,  codeName: str) -> optional sys_core::SysCode
    using (select assert_single(sys_core::SysCode filter 
      .ownerSys.name = sysName and .codeType.name = codeTypeName and .name = codeName));

  function getCodeType(codeTypeName: str) -> optional sys_core::SysCodeType
    using (select sys_core::SysCodeType filter .name = codeTypeName);

  function getDataObj(dataObjName: str) -> optional sys_core::SysDataObj
    using (select sys_core::SysDataObj filter .name = dataObjName);        
      
  function getDataObjActionGroup(name: str) -> optional sys_core::SysDataObjActionGroup
    using (select sys_core::SysDataObjActionGroup filter .name = name);        
      
  function getDataObjColumn(dataObjName: str, columnName: str) -> optional sys_core::SysDataObjColumn
    using (select assert_single((select sys_core::SysDataObjColumn filter .id in (select sys_core::SysDataObj filter .name = dataObjName).columns.id and any(.column.name = columnName union .nameCustom  = columnName))));        
   
  function getDataObjFieldEmbedListConfig(name: str) -> optional sys_core::SysDataObjFieldEmbedListConfig
    using (select sys_core::SysDataObjFieldEmbedListConfig filter .name = name);

  function getDataObjFieldEmbedListEdit(name: str) -> optional sys_core::SysDataObjFieldEmbedListEdit
    using (select sys_core::SysDataObjFieldEmbedListEdit filter .name = name);
  
  function getDataObjFieldEmbedListSelect(name: str) -> optional sys_core::SysDataObjFieldEmbedListSelect
    using (select sys_core::SysDataObjFieldEmbedListSelect filter .name = name);
      
  function getDataObjFieldListItems(name: str) -> optional sys_core::SysDataObjFieldListItems
    using (select sys_core::SysDataObjFieldListItems filter .name = name);    

  function getEligibility(name: str) -> optional sys_core::SysEligibility
    using (select assert_single((select sys_core::SysEligibility filter .name = name)));        

  function getEligibilityNode(id: str) -> optional sys_core::SysEligibilityNode
    using (select assert_single((select sys_core::SysEligibilityNode filter .id = <uuid>id)));        

  function getNodeObjByName(nodeObjName: str) -> optional sys_core::SysNodeObj
    using (select sys_core::SysNodeObj filter .name = nodeObjName);

  function getNodeObjById(nodeObjId: str) -> optional sys_core::SysNodeObj
    using (select sys_core::SysNodeObj filter .id = <uuid>nodeObjId);    

  function getObj(ownerName:str, name: str) -> optional sys_core::SysObj
    using (select assert_single((select sys_core::SysObj filter .ownerSys.name = ownerName and .name = name)));

  function getObjAttr(codeAttrTypeName:str, name: str) -> optional sys_core::SysObjAttr
    using (select assert_single((select sys_core::SysObjAttr filter .codeAttrType.name = codeAttrTypeName and .name = name)));

  function getObjRootCore(name: str) -> optional sys_core::ObjRootCore
    using (select assert_single((select sys_core::ObjRootCore filter .name = name)));
    
  function getOrg(name: str) -> optional sys_core::SysOrg
    using (select assert_single((select sys_core::SysOrg filter .name = name)));

  function getSystem(nameOwner: str, nameSystem: str) -> optional sys_core::SysSystem
    using (select assert_single((select sys_core::SysSystem filter .ownerOrg.name = nameOwner and .name = nameSystem))); 
   
  function getSystemPrime(nameSystem: str) -> optional sys_core::SysSystem
    using (select assert_single((select sys_core::SysSystem filter .name = nameSystem))); 
   
  # <todo> migrate itemsList to functions rather than raw selects
  # have to beable to return an array from a function
  # function getItemsListCodeByCodeTypeName() -> array<Code>
  #     using (select Code );
}
